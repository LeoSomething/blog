<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kernel on leo_something</title>
    <link>http://leo1.cc/tags/kernel/</link>
    <description>Recent content in Kernel on leo_something</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 14:22:00 +0000</lastBuildDate>
    <atom:link href="http://leo1.cc/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TeamItalyCTF 2022 - FamilyRecipes</title>
      <link>http://leo1.cc/posts/writeups/teamitalyctf22-familyrecipes/</link>
      <pubDate>Tue, 28 Jan 2025 14:22:00 +0000</pubDate>
      <guid>http://leo1.cc/posts/writeups/teamitalyctf22-familyrecipes/</guid>
      <description>This is one of the first heap related kernel challenges I solved, so this writeup could be inaccurate in some spots.</description>
    </item>
    <item>
      <title>Kpwn tecniques: modprobe_path</title>
      <link>http://leo1.cc/posts/docs/modprobe/</link>
      <pubDate>Tue, 14 Jan 2025 19:30:00 +0000</pubDate>
      <guid>http://leo1.cc/posts/docs/modprobe/</guid>
      <description>modprobe_path is a global variable that in most kernels is RW. This variable is contains a path to an executable, do you see where this is going..?</description>
    </item>
    <item>
      <title>Kpwn tecniques: struct msg_msg</title>
      <link>http://leo1.cc/posts/docs/msg_msg/</link>
      <pubDate>Tue, 14 Jan 2025 19:00:00 +0000</pubDate>
      <guid>http://leo1.cc/posts/docs/msg_msg/</guid>
      <description>msg_msg is a really powerful and elastic kernel struct that can be abused to obtain strong primitives, such as arbitrary read/write/free.</description>
    </item>
  </channel>
</rss>
